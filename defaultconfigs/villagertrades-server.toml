#Adds new villager trades. villager_x_trades defines the villager level (1-5). Due to technical reasons, if you add trades for a specific profession for a specific level, you need to re-add all trades for that profession level. E. g. if you wanted to add an enchanted book trade to a level 5 librarian, you need to re-add the vanilla trade for a level 5 librarian (20 emeralds -> 1 name tag, see Minecraft Wiki) as well.
#Format is "profession;uses;xp;pricemultiplier;tradetype;tradetype-specific-arguments"
#Profession: villager profession (e. g. "minecraft:librarian")
#Uses: How often the trade can be traded before it is locked. This is 12 or 16 for most trades, for enchanted items, it is 3
#Xp: The amount of villager xp given to the villager
#Price multiplier: Every time you trade with a villager, the selling price is multiplied with (1 - this value). For example, a value of 0.1 means that every time you use the trade, the price is lowered by 10%. Vanilla default for most items is 0.05, for tools, armor or enchanted books, it is 0.2
#Tradetype and corresponding tradetype-specific args can take the following values (values in [] are optional):
#  "normal": "buyItem1;buyItemCount1;[buyItem2];[buyItemCount2];sellItem;sellItemCount" - a normal trade that takes 1 or 2 stacks in and gives 1 stack out. The items are item ids (e. g. "minecraft:emerald"), the item counts are numbers between 1 and 64
#  "dyed": "buyItem1;buyItemCount1;[buyItem2];[buyItemCount2];sellItem" - the sell item (e. g. leather armor) will be randomly dyed
#  "map": "buyItem1;buyItemCount1;[buyItem2];[buyItemCount2];structure;mapdecoration" - structure is a structure id (e. g. "minecraft:stronghold"), mapdecoration can be one of the following: "player", "frame", "red_marker", "blue_marker", "target_x", "target_point", "player_off_map", "player_off_limits", "mansion", "monument", "red_x", "banner_black", "banner_blue", "banner_brown", "banner_cyan", "banner_gray", "banner_green", "banner_light_blue", "banner_light_gray", "banner_lime", "banner_magenta", "banner_orange", "banner_pink", "banner_purple", "banner_red", "banner_white", "banner_yellow"
#  "enchantedbook": "buyItem1;[buyItem2];[buyItemCount2]" - outputs a randomly enchanted book, at which rarity the quantity of buyItem1 is scaled - so if buyItem1 was minecraft:emerald, a sharpness 5 book costs approx. 5 times more emeralds than a sharpness 1 book
#  "enchanteditem": "buyItem1;[buyItem2];[buyItemCount2];sellItem" - the sell item is randomly enchanted, and the quantity of buyItem1 is scaled at the enchantment rarity, similar to the enchanted book trade type
#  "potion": "buyItem1;buyItemCount1;[buyItem2];[buyItemCount2];sellItem" - a random potion is applied to the sell item, so unless you have additional potion-like items added by other mods, this should only be "minecraft:potion", "minecraft:splash_potion", "minecraft:lingering_potion" or "minecraft:tipped_arrow"
#  "stew": "buyItem1;buyItemCount1;[buyItem2];[buyItemCount2];effect;duration" - effect is an effect id (e. g. "minecraft:strength"), duration is an integer that resembles the ticks the effects last.
villager_1_trades = ["immersiveengineering:engineer;12;1;0;normal;immersiveengineering:creosote_bucket;1;immersiveengineering:treated_wood_horizontal;8", "immersiveengineering:engineer;16;1;0;normal;immersiveengineering:stick_treated;8;minecraft:emerald;1"]
villager_2_trades = ["immersiveengineering:machinist;4;1;0;normal;mekanism:block_steel;1;immersiveengineering:component_steel;1", "immersiveengineering:machinist;12;1;0;normal;immersiveengineering:ingot_aluminum;4;minecraft:emerald;1", "immersiveengineering:engineer;12;1;0;normal;createaddition:iron_rod;3;minecraft:emerald;1", "immersiveengineering:engineer;12;1;0;normal;immersiveengineering:plate_steel;6;immersiveengineering:steel_scaffolding_standard;4"]
villager_3_trades = ["immersiveengineering:machinist;12;1;0;normal;immersiveengineering:treated_wood_horizontal;4;immersiveengineering:waterwheel_segment;1", "immersiveengineering:engineer;12;1;0;normal;thermal:slag;8;immersiveengineering:concrete;2", "immersiveengineering:engineer;12;1;0;normal;immersiveengineering:stick_steel;4;minecraft:emerald;1"]
villager_4_trades = []
villager_5_trades = []
#Adds new wandering trader trades. Due to how the wandering trader works, there are two lists: normal and last trades. When the trader spawns, five normal trades and one last trade are each randomly chosen from their corresponding lists. Note that as soon as you add anything in one of the lists, it removes all other trades, and only this mod's added trades remain, so you need to re-add most things if you only want to add one trade. See the Minecraft Wiki for the default trades.
#Format is "uses;pricemultiplier;tradetype;tradetype-specific-args"
#Uses: How often the trade can be traded before it is locked. This is 12 or 16 for most trades, for enchanted items, it is 3
#Price multiplier: Every time you trade with a villager, the selling price is multiplied with (1 - this value). For example, a value of 0.1 means that every time you use the trade, the price is lowered by 10%. Vanilla default for most items is 0.05, for tools, armor, enchanted books and maps, it is 0.2
#Tradetype and corresponding tradetype-specific args can take the following values (values in [] are optional):
#  "normal": "buyItem1;buyItemCount1;[buyItem2];[buyItemCount2];sellItem;sellItemCount" - a normal trade that takes 1 or 2 stacks in and gives 1 stack out. The items are item ids (e. g. "minecraft:emerald"), the item counts are numbers between 1 and 64
#  "dyed": "buyItem1;buyItemCount1;[buyItem2];[buyItemCount2];sellItem" - the sell item (e. g. leather armor) will be randomly dyed
#  "map": "buyItem1;buyItemCount1;[buyItem2];[buyItemCount2];structure;mapdecoration" - structure is a structure id (e. g. "minecraft:stronghold"), mapdecoration can be one of the following: "player", "frame", "red_marker", "blue_marker", "target_x", "target_point", "player_off_map", "player_off_limits", "mansion", "monument", "red_x", "banner_black", "banner_blue", "banner_brown", "banner_cyan", "banner_gray", "banner_green", "banner_light_blue", "banner_light_gray", "banner_lime", "banner_magenta", "banner_orange", "banner_pink", "banner_purple", "banner_red", "banner_white", "banner_yellow"
#  "enchantedbook": "buyItem1;buyItem2;buyItemCount2" - outputs a randomly enchanted book, at which rarity the quantity of buyItem1 is scaled - so if buyItem1 was minecraft:emerald, a sharpness 5 book costs approx. 5 times more emeralds than a sharpness 1 book
#  "enchanteditem": "buyItem1;buyItem2;buyItemCount2;sellItem" - the sell item is randomly enchanted, and the quantity of buyItem1 is scaled at the enchantment rarity, similar to the enchanted book trade type
#  "potion": "buyItem1;buyItemCount1;[buyItem2];[buyItemCount2];sellItem" - a random potion is applied to sellItem, so unless you have additional potion-like items added by other mods, this should only be "minecraft:potion", "minecraft:splash_potion", "minecraft:lingering_potion" or "minecraft:tipped_arrow"
#  "stew": "buyItem1;buyItemCount1;[buyItem2];[buyItemCount2];effect;duration" - effect is an effect id (e. g. "minecraft:strength"), duration is an integer that resembles the ticks the effects last.
trader_normal_trades = []
trader_last_trades = []

